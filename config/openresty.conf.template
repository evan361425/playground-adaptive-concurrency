events {
}

http {
  lua_package_path "/etc/openresty/lua_modules/?.lua;;";

  lua_shared_dict shared_dict 10m;

  init_worker_by_lua_block {
    props = {
      # Told the program where is the "lua_shared_dict"(#7)
      shared_dict_key = "shared_dict",
      # Concurrency limit, start from 10
      # if able to handle more(low latency)
      #   keep adding limit until hit the maximum
      # else
      #   drop the capability
      concurrency_limit = {
        initial = 10,
        min = 10,
        max = 30
      },
      # How latency calculated
      latency_props = {
        # Minimum of the requests to calculate the latency
        min_requests = 5,
        # comment "percentile" will use average
        percentile = {
          usage = 90
        }
      }
      # AIMD property
      aimd_props = {
        backoff_ratio = 0.9
        timeout_ms = 5000
      }
    }

    main_lib = require "main"
    adaptive_concurrency, err = main_lib.new(props)
    adaptive_concurrency:start()
  }

  upstream my-app {
    server app:${APP_PORT};
  }

  server {
    listen ${LB_PORT} default_server;

    location / {
      access_by_lua_block {
        local allowed, err = adaptive_concurrency:incoming()
        if not allowed then
          return ngx.exit(503)
        end

        local ctx = ngx.ctx
        ctx.allowed = true
      }

      proxy_pass http://my-app;
    }

    log_by_lua_block {
      local ctx = ngx.ctx
      local allowed = ctx.allowed

      if allowed then
        local latency = math.floor(tonumber(ngx.var.request_time) * 1000)
        local conn, err = adaptive_concurrency:leaving(latency)
        if not conn then
          ngx.log(ngx.ERR,
              "failed to record the connection leaving ",
              "request: ", err)
          return
        end
      end
    }
  }

  map $upstream_response_time $my_res_time {
    default   $upstream_response_time;
    ""        "0";
  }
  map $upstream_connect_time $my_conn_time {
    default   $upstream_connect_time;
    ""        "0";
  }

  log_format json_combined escape=json
  '{"nginx":{'
    '"timestamp":$msec,'
    '"status":$status,'
    '"request_time":$request_time,'
    '"request_path":"$uri",'
    '"response_time":$my_res_time,'
    '"connect_time":$my_conn_time }'
  '}';

  access_log /var/log/openresty/access.log json_combined;
}
